// Generated by gencpp from file miniarm_test/MoveArmRequest.msg
// DO NOT EDIT!


#ifndef MINIARM_TEST_MESSAGE_MOVEARMREQUEST_H
#define MINIARM_TEST_MESSAGE_MOVEARMREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace miniarm_test
{
template <class ContainerAllocator>
struct MoveArmRequest_
{
  typedef MoveArmRequest_<ContainerAllocator> Type;

  MoveArmRequest_()
    : target_position()  {
    }
  MoveArmRequest_(const ContainerAllocator& _alloc)
    : target_position(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _target_position_type;
  _target_position_type target_position;





  typedef boost::shared_ptr< ::miniarm_test::MoveArmRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::miniarm_test::MoveArmRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MoveArmRequest_

typedef ::miniarm_test::MoveArmRequest_<std::allocator<void> > MoveArmRequest;

typedef boost::shared_ptr< ::miniarm_test::MoveArmRequest > MoveArmRequestPtr;
typedef boost::shared_ptr< ::miniarm_test::MoveArmRequest const> MoveArmRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::miniarm_test::MoveArmRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::miniarm_test::MoveArmRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::miniarm_test::MoveArmRequest_<ContainerAllocator1> & lhs, const ::miniarm_test::MoveArmRequest_<ContainerAllocator2> & rhs)
{
  return lhs.target_position == rhs.target_position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::miniarm_test::MoveArmRequest_<ContainerAllocator1> & lhs, const ::miniarm_test::MoveArmRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace miniarm_test

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::miniarm_test::MoveArmRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::miniarm_test::MoveArmRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::miniarm_test::MoveArmRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::miniarm_test::MoveArmRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::miniarm_test::MoveArmRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::miniarm_test::MoveArmRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::miniarm_test::MoveArmRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f75376e65983f8c060d677c4184eba54";
  }

  static const char* value(const ::miniarm_test::MoveArmRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf75376e65983f8c0ULL;
  static const uint64_t static_value2 = 0x60d677c4184eba54ULL;
};

template<class ContainerAllocator>
struct DataType< ::miniarm_test::MoveArmRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "miniarm_test/MoveArmRequest";
  }

  static const char* value(const ::miniarm_test::MoveArmRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::miniarm_test::MoveArmRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point target_position\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::miniarm_test::MoveArmRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::miniarm_test::MoveArmRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveArmRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::miniarm_test::MoveArmRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::miniarm_test::MoveArmRequest_<ContainerAllocator>& v)
  {
    s << indent << "target_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.target_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MINIARM_TEST_MESSAGE_MOVEARMREQUEST_H
